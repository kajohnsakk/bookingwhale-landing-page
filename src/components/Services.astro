---
import { Icon } from "astro-icon/components";

const services = [
  {
    id: "booking",
    title: "จองง่ายผ่าน Line และทุกช่องทางออนไลน์",
    description:
      "ลูกค้าจองได้ทันทีผ่าน LINE หรือสแกน QR Code หน้าร้าน พร้อมลิงก์แชร์บน Facebook, Instagram หรือเว็บไซต์ เข้าถึงได้ง่ายทุกที่ทุกเวลา ดู<a href='#features' class='text-blue-300 hover:text-white transition-colors'>ฟีเจอร์เพิ่มเติม</a>",
    icon: "lucide:mouse-pointer-click",
    badge: "BOOKING EASY",
  },
  {
    id: "schedule",
    title: "จัดตารางอย่างอัจฉริยะไม่พลาดทุกคิว",
    description:
      "หมดกังวลเมื่อมีลูกค้าเข้ามาเยอะ ระบบจะจัดคิวให้อัตโนมัติ พร้อมจองวัน และเวลาเดิมให้ลูกค้าประจำ ให้การนัดหมายเป็นเรื่องง่าย ไม่ตกหล่น อ่าน<a href='#blog' class='text-blue-300 hover:text-white transition-colors'>บทความจัดการคิว</a>",
    icon: "lucide:calendar-check-2",
    badge: "SMART SCHEDULE",
  },
  {
    id: "noshow",
    title: "ลดการผิดนัด (No-Show) และยกเลิกกระทันหัน",
    description:
      "แจ้งเตือนล่วงหน้าทาง LINE พร้อมกำหนด SLA หรือค่าปรับเมื่อยกเลิกใกล้เวลานัด ช่วยลด No-Show รักษาคิวให้เต็มและไม่เสียโอกาสทางการขาย ดู<a href='#faq' class='text-blue-300 hover:text-white transition-colors'>คำถามเกี่ยวกับการแจ้งเตือน</a>",
    icon: "lucide:user-x",
    badge: "SHOW UP",
  },
  {
    id: "rebooking",
    title: "สร้างความสัมพันธ์กับลูกค้า เพิ่มการจองซ้ำ",
    description:
      "หลังการใช้บริการ ระบบจะส่งข้อความผ่าน LINE เพื่อชวนลูกค้าจองรอบถัดไปทันที ลดขั้นตอนการตัดสินใจ ช่วยให้คิวเต็มต่อเนื่อง <a href='#contact' class='text-blue-300 hover:text-white transition-colors'>ติดต่อเราเพื่อเริ่มต้น</a>",
    icon: "lucide:heart-handshake",
    badge: "REBOOKING",
  },
];
---

<!-- Service Schema markup -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Service",
  "provider": {
    "@type": "Organization",
    "name": "BookingWhale",
    "url": "https://bookingwhale.com"
  },
  "serviceType": "Booking Management System",
  "description": "Complete LINE OA booking management platform for Thai businesses",
  "hasOfferCatalog": {
    "@type": "OfferCatalog",
    "name": "BookingWhale Services",
    "itemListElement": [
      {
        "@type": "Offer",
        "itemOffered": {
          "@type": "Service",
          "name": "LINE OA Online Booking",
          "description": "Easy booking through LINE Official Account and all online channels including QR codes and social media integration"
        }
      },
      {
        "@type": "Offer",
        "itemOffered": {
          "@type": "Service",
          "name": "Smart Queue Management",
          "description": "Intelligent scheduling system that automatically manages queues and prevents double bookings"
        }
      },
      {
        "@type": "Offer",
        "itemOffered": {
          "@type": "Service",
          "name": "No-Show Reduction",
          "description": "LINE notification system with reminders and cancellation policies to reduce no-shows"
        }
      },
      {
        "@type": "Offer",
        "itemOffered": {
          "@type": "Service",
          "name": "Customer Relationship Management",
          "description": "Automated rebooking messages and customer retention system through LINE messaging"
        }
      }
    ]
  },
  "areaServed": {
    "@type": "Country",
    "name": "Thailand"
  },
  "availableLanguage": ["Thai", "English"]
}
</script>

<section
  id="services"
  class="section-padding bg-gradient-to-br from-gray-50 to-white relative overflow-hidden"
  aria-labelledby="services-heading"
>
  <!-- Enhanced Background Elements -->
  <div
    class="absolute inset-0 bg-[url('data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke='rgb(59 130 246 / 0.03)'%3e%3cpath d='m0 .5h32m-32 32v-32'/%3e%3c/svg%3e')] opacity-60 pointer-events-none"
  >
  </div>


  <div class="container-tight relative">
    <div class="text-center mb-16">
      <div class="relative">
        <h2
          id="services-heading"
          class="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-900 mb-6 relative inline-block"
        >
          <span data-translate="ourServices" class="relative z-10"
            >Why Booking Whale</span
          >
          <div
            class="absolute bottom-2 left-0 right-0 h-3 opacity-60 -skew-x-12 transform origin-bottom-left"
            style="background-color: #0047ff;"
          >
          </div>

        </h2>
        <p
          data-translate="servicesDescription"
          class="text-body-large text-gray-600 max-w-2xl mx-auto leading-relaxed"
        >
          ทุกอย่างที่คุณต้องการ ในที่เดียว
        </p>
      </div>
    </div>

    <div class="grid md:grid-cols-2 gap-8 lg:gap-12 max-w-5xl mx-auto">
      {
        services.map((service, index) => {
          // Diagonal pattern: index 0,3 (top-left, bottom-right) vs index 1,2 (top-right, bottom-left)
          const isDiagonal = index === 0 || index === 3;
          const bgClass = isDiagonal
            ? "text-white"
            : "bg-white text-gray-900 border border-gray-200";

          const iconBgClass = isDiagonal
            ? "bg-white/20 text-white"
            : "bg-blue-50";

          const badgeClass = isDiagonal
            ? "bg-white/20 text-white border border-white/30"
            : "text-white";

          const textClass = isDiagonal ? "text-white" : "text-gray-900";

          const descClass = isDiagonal ? "text-blue-100" : "text-gray-600";

          return (
            <div
              class={`${bgClass} rounded-2xl p-8 text-center relative overflow-hidden shadow-xl transition-all duration-700 hover:scale-105 hover:shadow-2xl hover:shadow-blue-500/20 group/card service-card cursor-pointer`}
              style={isDiagonal ? `background-color: #0047ff; opacity: 0; transform: translateX(${index % 2 === 0 ? '-100px' : '100px'}) rotateY(45deg);` : `opacity: 0; transform: translateX(${index % 2 === 0 ? '-100px' : '100px'}) rotateY(-45deg);`}
              data-delay={index * 200}
              data-direction={index % 2 === 0 ? 'left' : 'right'}
            >
              {/* Subtle corner decorations */}
              <div
                class={`absolute top-0 right-0 w-16 h-16 opacity-10 ${isDiagonal ? "bg-white" : "bg-blue-500"}`}
                style="clip-path: polygon(100% 0%, 0% 0%, 100% 100%);"
              />
              <div
                class={`absolute bottom-0 left-0 w-12 h-12 opacity-5 ${isDiagonal ? "bg-white" : "bg-blue-500"}`}
                style="clip-path: polygon(0% 100%, 0% 0%, 100% 100%);"
              />

              {/* Enhanced Professional badge */}
              <div
                class={`absolute top-6 left-6 ${badgeClass} text-xs font-bold px-4 py-2 rounded-full shadow-lg transform -rotate-2 transition-all duration-500 backdrop-blur-sm badge-element hover:scale-110`}
                style={!isDiagonal ? { backgroundColor: "#0047ff" } : {}}
              >
                {service.badge}
              </div>

              {/* Enhanced Icon container */}
              <div class="mb-8 transform transition-all duration-500">
                <div
                  class={`w-20 h-20 mx-auto mb-4 flex items-center justify-center ${iconBgClass} rounded-2xl shadow-xl transition-all duration-500 relative group/icon hover:shadow-2xl`}
                  style={!isDiagonal ? `color: #0047ff; transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);` : `transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);`}
                >
                  <Icon name={service.icon} width={40} height={40} />

                  {/* Enhanced Icon glow effect */}
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-br from-white/20 to-transparent opacity-100 transition-opacity duration-300" />

                  {/* Subtle border */}
                  <div
                    class={`absolute inset-0 rounded-2xl border ${isDiagonal ? "border-white/30" : "border-blue-200/50"}`}
                  />
                </div>
              </div>

              {/* Content */}
              <div class="relative z-10">
                <h3
                  data-translate={`${service.id}Title`}
                  class={`text-xl font-bold mb-4 leading-tight ${textClass}`}
                >
                  {service.title}
                </h3>
                <p
                  data-translate={`${service.id}Desc`}
                  class={`text-base mb-6 leading-relaxed ${descClass}`}
                >
                  {service.description}
                </p>

                {/* Enhanced Bottom accent line */}
                <div class="relative">
                  <div
                    class="w-16 h-1.5 mx-auto rounded-full opacity-60 transition-all duration-300"
                    style={
                      isDiagonal
                        ? { backgroundColor: "rgba(255,255,255,0.4)" }
                        : { backgroundColor: "#0047ff" }
                    }
                  />
                  <div
                    class="w-8 h-1.5 mx-auto mt-1 rounded-full opacity-30 transition-all duration-300"
                    style={
                      isDiagonal
                        ? { backgroundColor: "rgba(255,255,255,0.2)" }
                        : { backgroundColor: "#0047ff" }
                    }
                  />
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</section>

<style>
  /* Service card animations */
  .service-card {
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    perspective: 1000px;
    transform-style: preserve-3d;
  }

  .service-card:hover .group\/icon {
    animation: bounceIcon 0.6s ease-in-out;
  }

  .service-card:hover .badge-element {
    animation: wiggleBadge 0.8s ease-in-out;
  }

  @keyframes bounceIcon {
    0%, 100% { transform: translateY(0) scale(1) rotateZ(0deg); }
    25% { transform: translateY(-10px) scale(1.1) rotateZ(5deg); }
    50% { transform: translateY(-5px) scale(1.05) rotateZ(-3deg); }
    75% { transform: translateY(-8px) scale(1.08) rotateZ(2deg); }
  }

  @keyframes wiggleBadge {
    0%, 100% { transform: rotate(-2deg) scale(1); }
    25% { transform: rotate(8deg) scale(1.05); }
    50% { transform: rotate(-10deg) scale(1.03); }
    75% { transform: rotate(5deg) scale(1.02); }
  }

  @keyframes floatIn {
    0% {
      opacity: 0;
      transform: translateY(30px) scale(0.8);
    }
    50% {
      opacity: 0.7;
      transform: translateY(-10px) scale(1.05);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes slideInFromLeft {
    0% {
      opacity: 0;
      transform: translateX(-100px) rotateY(45deg);
    }
    100% {
      opacity: 1;
      transform: translateX(0) rotateY(0deg);
    }
  }

  @keyframes slideInFromRight {
    0% {
      opacity: 0;
      transform: translateX(100px) rotateY(-45deg);
    }
    100% {
      opacity: 1;
      transform: translateX(0) rotateY(0deg);
    }
  }
  @keyframes icon-float {
    0%,
    100% {
      transform: translateY(0px) rotate(0deg);
    }
    25% {
      transform: translateY(-8px) rotate(2deg);
    }
    50% {
      transform: translateY(-4px) rotate(-1deg);
    }
    75% {
      transform: translateY(-10px) rotate(1deg);
    }
  }

  @keyframes card-up {
    from {
      opacity: 0;
      transform: translateY(60px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slide-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  .animate-icon-float {
    animation: icon-float 4s infinite ease-in-out;
  }

  .animate-card-up {
    animation: card-up 0.8s ease-out both;
  }

  .animate-slide-up {
    animation: slide-up 0.6s ease-out both;
  }

  .animate-fade-in {
    animation: fade-in 0.8s ease-out both;
  }

  /* Staggered animation delays */
  .animation-delay-0 {
    animation-delay: 0ms;
  }
  .animation-delay-200 {
    animation-delay: 200ms;
  }
  .animation-delay-400 {
    animation-delay: 400ms;
  }
  .animation-delay-500 {
    animation-delay: 500ms;
  }
  .animation-delay-600 {
    animation-delay: 600ms;
  }
  .animation-delay-800 {
    animation-delay: 800ms;
  }
  .animation-delay-1000 {
    animation-delay: 1000ms;
  }
  .animation-delay-1200 {
    animation-delay: 1200ms;
  }
  .animation-delay-1500 {
    animation-delay: 1500ms;
  }
  .animation-delay-2000 {
    animation-delay: 2000ms;
  }

  /* Hover effects with shimmer */
  .group:hover::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    animation: shimmer 1.5s ease-in-out;
    pointer-events: none;
  }

  /* Performance optimizations */
  .animate-icon-float,
  .animate-card-up {
    will-change: transform, opacity;
  }

  /* Mobile performance optimization */
  @media (max-width: 768px) {
    .animate-icon-float {
      animation-duration: 6s;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .animate-icon-float,
    .animate-card-up,
    .animate-slide-up,
    .animate-fade-in {
      animation: none;
    }
  }
</style>

<script>
  // Intersection Observer for service cards animation
  const serviceObserverOptions = {
    threshold: 0.2,
    rootMargin: '0px 0px -50px 0px'
  };

  const serviceObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const delay = parseInt(entry.target.getAttribute('data-delay') || '0', 10);
        const element = entry.target as HTMLElement;

        setTimeout(() => {
          element.style.opacity = '1';
          element.style.transform = 'translateX(0) rotateY(0deg)';

          // Add floating animation to content
          const content = element.querySelector('.relative.z-10');
          if (content) {
            (content as HTMLElement).style.animation = 'floatIn 0.8s ease-out both';
            (content as HTMLElement).style.animationDelay = '0.3s';
          }
        }, delay);

        serviceObserver.unobserve(entry.target);
      }
    });
  }, serviceObserverOptions);

  // Start observing all service cards
  document.addEventListener('DOMContentLoaded', () => {
    const serviceCards = document.querySelectorAll('.service-card');
    serviceCards.forEach(card => {
      serviceObserver.observe(card);
    });

    // Add enhanced hover effects
    serviceCards.forEach((card, index) => {
      const badge = card.querySelector('.badge-element');
      const icon = card.querySelector('.group\/icon');

      card.addEventListener('mouseenter', () => {
        // Add subtle tilt effect
        (card as HTMLElement).style.transform = `rotateX(5deg) rotateY(${index % 2 === 0 ? '3deg' : '-3deg'}) scale(1.02)`;

        // Pulse effect for badge
        if (badge) {
          (badge as HTMLElement).style.transform = 'rotate(-2deg) scale(1.1)';
          (badge as HTMLElement).style.boxShadow = '0 0 20px rgba(0, 71, 255, 0.3)';
        }
      });

      card.addEventListener('mouseleave', () => {
        (card as HTMLElement).style.transform = 'rotateX(0) rotateY(0deg) scale(1)';

        if (badge) {
          (badge as HTMLElement).style.transform = 'rotate(-2deg) scale(1)';
          (badge as HTMLElement).style.boxShadow = '';
        }
      });

      // Add click ripple effect
      card.addEventListener('click', (e) => {
        const ripple = document.createElement('div');
        const rect = card.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;

        ripple.style.cssText = `
          position: absolute;
          width: ${size}px;
          height: ${size}px;
          left: ${x}px;
          top: ${y}px;
          background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
          border-radius: 50%;
          transform: scale(0);
          animation: rippleEffect 0.6s ease-out;
          pointer-events: none;
          z-index: 1;
        `;

        card.appendChild(ripple);

        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
    });

    // Add ripple animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes rippleEffect {
        0% { transform: scale(0); opacity: 1; }
        100% { transform: scale(2); opacity: 0; }
      }
    `;
    document.head.appendChild(style);
  });
</script>
